# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  node: circleci/node@4.3
  gh: circleci/github-cli@1.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test

      - run:
          name: Code Coverage
          command: curl -Os https://uploader.codecov.io/latest/linux/codecov; chmod +x codecov; ./codecov

      - run:
          name: Checkstyle
          command: mvn -B -DskipTests checkstyle:checkstyle

      - run:
          name: Change badge
          command: |
            errors=$(grep -o "severity=\"error\"" output/checkstyle-result.xml | wc -l || true);
            if [ $errors -lt 1 ]
              then
                curl https://badgen.net/badge/checkstyle/$errors%20Errors/green -o badge.svg;
              elif [ $errors -lt 20 ]
                then
                  curl https://badgen.net/badge/checkstyle/$errors%20Errors/yellow -o badge.svg;
                else
                  curl https://badgen.net/badge/checkstyle/$errors%20Errors/red -o badge.svg;
            fi;
            echo '. as $file
              | $json
              | (.files."badge.svg".content= $file + "\n" + .content)' > program.jq;
            echo '{"description": "Badge checkstyle",
              "files": {
              "badge.svg": {
              "content": ""
              }
              }
              }' > curl.json;
            jq -R -s --argfile json curl.json -f program.jq badge.svg > content.json;
            curl -X PATCH -H "Accept: application/vnd.github.v3+json" \
            -u $GIT_NAME:$GIT_TOKEN \
            --data-binary "@content.json" \
            https://api.github.com/gists/7c4b96672dae6e5b47f99194266ef5a9

      - run:
          name: Generate javadoc
          command: mvn -B -DskipTests javadoc:javadoc

      - persist_to_workspace:
          root: output/site/
          paths: apidocs

  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - attach_workspace:
          at: docs/
      - add_ssh_keys:
          fingerprints:
            - "27:88:d0:28:fa:f8:a1:cf:9e:74:70:b3:8f:bc:38:e0"
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "leszczytom@gmail.com"
            git config user.name "leszczytom"
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            ls docs/apidocs -l;
            gh-pages --dotfiles --message "[skip ci] Updates" --dist docs/apidocs/


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  version: 2
  build:
      jobs:
        - build-and-test
        - docs-deploy:
            requires:
              - build-and-test
            filters:
              branches:
                only: master
